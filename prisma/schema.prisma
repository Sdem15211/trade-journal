generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Journal Journal[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields      JournalField[]
  trades      Trade[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model JournalField {
  id          String     @id @default(cuid())
  journalId   String
  journal     Journal    @relation(fields: [journalId], references: [id], onDelete: Cascade)
  name        String
  type        FieldType
  required    Boolean    @default(false)
  order       Int
  options     String[]   // For dropdown/multi-select fields
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([journalId])
}

model Trade {
  id          String     @id @default(cuid())
  journalId   String
  journal     Journal    @relation(fields: [journalId], references: [id], onDelete: Cascade)
  pair        String
  openDate    DateTime
  closeDate   DateTime
  result      TradeResult
  pnl         Float
  notes       String?
  fields      Json       // Store custom field values
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([journalId])
}

enum FieldType {
  TEXT
  SELECT
  MULTI_SELECT
  RADIO
}

enum TradeResult {
  WIN
  LOSS
  BREAKEVEN
}
