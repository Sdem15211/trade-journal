generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  Journal       Journal[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id          String         @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields      JournalField[]
  trades      Trade[]

  @@unique([name, userId])
  @@index([userId])
}

model JournalField {
  id        String    @id @default(cuid())
  journalId String
  name      String
  type      FieldType
  required  Boolean   @default(false)
  order     Int
  options   String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  journal   Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)

  @@index([journalId])
}

model Trade {
  id        String      @id @default(cuid())
  journalId String
  openDate  DateTime
  closeDate DateTime
  result    TradeResult
  pnl       Float
  notes     String?
  fields    Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  pair      String
  journal   Journal     @relation(fields: [journalId], references: [id], onDelete: Cascade)

  @@index([journalId])
}

enum FieldType {
  TEXT
  SELECT
  MULTI_SELECT
}

enum TradeResult {
  WIN
  LOSS
  BREAKEVEN
}
