generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  strategies    Strategy[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Strategy {
  id          String         @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields      StrategyField[]
  liveJournal LiveJournal?  // One-to-one relation with LiveJournal
  backtests   Backtest[]    // One-to-many relation with Backtest
  trades      Trade[]       // All trades across live and backtest

  @@unique([name, userId])
  @@index([userId])
}

model StrategyField {
  id         String     @id @default(cuid())
  strategyId String
  name       String
  type       FieldType
  required   Boolean    @default(false)
  order      Int
  options    String[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  strategy   Strategy   @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId])
}

model LiveJournal {
  id         String   @id @default(cuid())
  strategyId String   @unique  // Makes this a one-to-one relation with Strategy
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  strategy   Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  trades     Trade[]  @relation("LiveTrades")
}

model Backtest {
  id          String   @id @default(cuid())
  name        String
  description String?
  strategyId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  strategy    Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  trades      Trade[]  @relation("BacktestTrades")

  @@index([strategyId])
}

model Trade {
  id          String      @id @default(cuid())
  strategyId  String
  liveJournalId String?
  backtestId  String?
  pair        String
  status      TradeStatus
  openDate    DateTime
  closeDate   DateTime?
  result      TradeResult?
  pnl         Float?
  notes       String?
  fields      Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  strategy    Strategy    @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  liveJournal LiveJournal? @relation("LiveTrades", fields: [liveJournalId], references: [id])
  backtest    Backtest?   @relation("BacktestTrades", fields: [backtestId], references: [id])

  @@index([strategyId])
  @@index([liveJournalId])
  @@index([backtestId])
}

enum FieldType {
  TEXT
  SELECT
  MULTI_SELECT
}

enum TradeStatus {
  ORDER_PLACED
  OPEN
  CLOSED
}

enum TradeResult {
  WIN
  LOSS
  BREAKEVEN
}
